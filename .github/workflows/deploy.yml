name: Test, build Docker image and deploy to production
on: push

jobs:
  test:
    name: Test GetPet WEB
    runs-on: ubuntu-latest
    env:
      DEV: 1
      POSTGRES_HOST: localhost
      POSTGRES_USER: getpet
      POSTGRES_PASSWORD: getpet
      POSTGRES_DB: getpet

    services:
      postgres:
        image: kartoza/postgis:12.1
        ports: ['5432:5432']
        env:
          POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASS: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DBNAME: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10

    steps:
      - uses: actions/checkout@master

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Install apt dependencies
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends gdal-bin python3-gdal libpq-dev

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade wheel
          python -m pip install -r requirements.txt
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Run tests
        run: python manage.py test

  build_docker:
    name: Build and push Docker image to registry
    runs-on: ubuntu-latest
    needs: test
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@master

      - name: Set GIT commit and branch
        id: git_vars
        run: |
          echo ::set-env name=GIT_COMMIT::$(git rev-parse --short HEAD)
          echo ::set-env name=GIT_BRANCH::$(git rev-parse --abbrev-ref HEAD)

      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: vycius/getpet-platform
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          cache: ${{ github.event_name != 'schedule' }}
          buildargs: GIT_COMMIT,GIT_BRANCH

      #      - name: Create a Sentry.io release
      #        uses: tclindner/sentry-releases-action@v1.1.0
      #        env:
      #          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      #          SENTRY_ORG: getpet
      #          SENTRY_PROJECT: getpet-web
      #        with:
      #          tagName: ${{ GITHUB_SHA }}
      #          environment: production


  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs: build_docker
    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          passphrase: ${{ secrets.PASSWORD }}
          key: ${{ secrets.KEY }}
          script: |
            cd ${{ secrets.TARGET }}
            git pull
            make
