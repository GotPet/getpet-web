# Generated by Django 3.0.4 on 2020-04-18 15:47

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import web.models


class Migration(migrations.Migration):

    replaces = [('web', '0001_initial'), ('web', '0002_auto_20181019_2220'), ('web', '0003_auto_20181116_1725'), ('web', '0004_auto_20181116_1728'), ('web', '0005_auto_20181117_2119'), ('web', '0006_auto_20181119_2337'), ('web', '0007_auto_20181119_2339'), ('web', '0008_pet_status'), ('web', '0009_auto_20181120_1139'), ('web', '0010_auto_20181120_1140'), ('web', '0011_auto_20190109_1506'), ('web', '0012_auto_20190116_1614'), ('web', '0013_auto_20190118_1600'), ('web', '0014_user_social_image_url'), ('web', '0015_auto_20190623_1634'), ('web', '0016_auto_20190623_1643'), ('web', '0017_auto_20190623_1728'), ('web', '0018_auto_20200418_1537'), ('web', '0019_auto_20200418_1540')]

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='img/users/', verbose_name='Vartotojo nuotrauka')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('social_image_url', models.URLField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Shelter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Prieglaudos pavadinimas')),
                ('email', models.EmailField(max_length=254, verbose_name='Elektroninis paštas')),
                ('phone', models.CharField(max_length=24, verbose_name='Telefono numeris')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Sukūrimo data')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atnaujinimo data')),
                ('authenticated_users', models.ManyToManyField(blank=True, help_text='Priskirti vartotojai gali matyti prieglaudos gyvūnus ir juos tvarkyti.', to=settings.AUTH_USER_MODEL, verbose_name='Vartotojai tvarkantys prieglaudos informaciją')),
            ],
            options={
                'verbose_name_plural': 'Gyvūnų prieglaudos',
                'ordering': ['-created_at', 'name'],
                'verbose_name': 'Gyvūnų prieglauda',
            },
        ),
        migrations.CreateModel(
            name='Pet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Gyvūno vardas')),
                ('photo', models.ImageField(upload_to=web.models.Pet._pet_photo_file, verbose_name='Gyvūno nuotrauka')),
                ('short_description', models.CharField(help_text='Trumpas aprašymas apie gyvūną rodomas programėlės pagrindiniame ekrane skirtas pritraukti varototojus paspausti ant gyvūno profilio.', max_length=64, verbose_name='Trumpas aprašymas')),
                ('description', models.TextField(help_text='Gyvūno aprašymas matomas įėjus į gyvūno profilį.', verbose_name='Aprašymas')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Sukūrimo data')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atnaujinimo data')),
                ('shelter', models.ForeignKey(help_text='Prieglauda, kurioje šiuo metu randasi gyvūnas', on_delete=django.db.models.deletion.CASCADE, related_name='pets', to='web.Shelter', verbose_name='Prieglauda')),
                ('status', models.IntegerField(choices=[(1, 'Laukia šeimininko'), (2, 'Laikinai paimtas per GetPet'), (3, 'Paimtas visam laikui per GetPet'), (4, 'Paimtas ne per GetPet')], db_index=True, default=1, help_text='Pažymėjus gyvūną, kaip laukiantį šeiminką jis bus rodomas programėlėje.', verbose_name='Gyvūno statusas')),
            ],
            options={
                'verbose_name_plural': 'Gyvūnai',
                'ordering': ['-created_at', 'name'],
                'verbose_name': 'Gyvūnas',
            },
        ),
        migrations.CreateModel(
            name='PetProfilePhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to=web.models.PetProfilePhoto._pet_photo_file, verbose_name='Gyvūno profilio nuotrauka')),
                ('order', models.PositiveIntegerField(default=0)),
                ('pet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profile_photos', to='web.Pet')),
            ],
            options={
                'verbose_name': 'Gyvūno profilio nuotrauka',
                'verbose_name_plural': 'Gyvūnų profilio nuotraukos',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='UserPetChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_favorite', models.BooleanField(verbose_name='Vartotojas pamėgo gyvūną')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Sukūrimo data')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atnaujinimo data')),
                ('pet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users_pet_choices', to='web.Pet', verbose_name='Gyvūnas')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users_pet_choices', to=settings.AUTH_USER_MODEL, verbose_name='Vartotojas')),
            ],
            options={
                'verbose_name': 'Vartotojo gyvūno pasirinkimaas',
                'verbose_name_plural': 'Vartotojų gyvūnų pasirinkimai',
                'default_related_name': 'users_pet_choices',
                'unique_together': {('user', 'pet')},
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Šalies pavadinimas')),
                ('code', models.CharField(help_text='Šalies kodas pagal ISO 3166 alpha 2 standartą pvz: lt, lv', max_length=2, unique=True, verbose_name='Šalies kodas')),
            ],
            options={
                'verbose_name': 'Šalis',
                'verbose_name_plural': 'Šalys',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Regiono pavadinimas')),
                ('code', models.CharField(help_text='Unikalus regiono kodas pvz: ankara', max_length=32, unique=True, verbose_name='Regiono kodas')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regions', to='web.Country', verbose_name='Šalis')),
            ],
            options={
                'verbose_name': 'Regionas',
                'verbose_name_plural': 'Regionai',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='shelter',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='shelters', to='web.Region', verbose_name='Regionas'),
        ),
        migrations.CreateModel(
            name='GetPetRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(1, 'Noras paimti gyvūną'), (2, 'Gyvūnas laikinai pasiimtas'), (3, 'Gyvūnas gražintas po laikinos globos'), (4, 'Gyvūnas pasiimtas visam laikui')], default=1, help_text='Pasirenkamas vienas iš gyvūno statusų pas potencialų šeimininką', verbose_name='Gyvūno statusas')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Sukūrimo data')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atnaujinimo data')),
                ('pet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='get_pet_requests', to='web.Pet', verbose_name='Gyvūnas')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='get_pet_requests', to=settings.AUTH_USER_MODEL, verbose_name='Vartotojas')),
            ],
            options={
                'verbose_name': 'Noras priglausti gyvūną',
                'verbose_name_plural': 'Norai priglausti gyvūnus',
                'default_related_name': 'get_pet_requests',
                'unique_together': {('user', 'pet')},
            },
        ),
    ]
